# GitHub Actions Workflow: Barebones Terraform init + apply
# Mirrors previous Azure DevOps pipeline behavior.
# WARNING: Applies automatically on pushes to main/master. Adjust for production (separate plan/apply, approvals, remote backend).

name: terraform-apply

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  TF_VERSION: 1.8.4
  TERRAFORM_WORKING_DIR: infra
  AUTO_APPLY: true
  EXTRA_TF_APPLY_ARGS: ''
  # When set (non-empty), skip terraform plan and instead download & use an Azure Artifacts universal package.
  # Provide the package name via ARTIFACT_OVERRIDE and version via ARTIFACT_VERSION.
  ARTIFACT_OVERRIDE: 'my-first-package'
  ARTIFACT_VERSION: '2025.9.3-test' # Required if ARTIFACT_OVERRIDE is set
  ARTIFACT_FEED: terraform-temporary-plans
  ARTIFACT_ORG: https://dev.azure.com/jonathanlittleton0381/

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # for future workload identity auth if needed

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show Context
        run: |
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "Run Number: $GITHUB_RUN_NUMBER"
          echo "Run Attempt: $GITHUB_RUN_ATTEMPT"
          echo "Repo Version (derived): $(date +%Y).$(date +%m | sed 's/^0*//').$(date +%d | sed 's/^0*//')-$GITHUB_RUN_NUMBER"
          echo "Terraform Version: $TF_VERSION"

      - name: Setup Terraform
        id: tfsetup
        run: |
          set -euo pipefail
          curl -fsSL https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip -o terraform.zip
          unzip -o terraform.zip
          sudo mv terraform /usr/local/bin/terraform
          terraform -version

      - name: (Optional) Download Override Artifact
        if: ${{ env.ARTIFACT_OVERRIDE != '' }}
        env:
          AZURE_DEVOPS_EXT_PAT: ${{ secrets.AZURE_DEVOPS_EXT_PAT }}
        run: |
          set -euo pipefail
          echo "Artifact override enabled: $ARTIFACT_OVERRIDE (version: $ARTIFACT_VERSION)"
          if [ -z "$AZURE_DEVOPS_EXT_PAT" ]; then
            echo "ERROR: AZURE_DEVOPS_EXT_PAT secret not provided." >&2
            exit 1
          fi
          if [ -z "$ARTIFACT_VERSION" ]; then
            echo "ERROR: ARTIFACT_VERSION must be set when ARTIFACT_OVERRIDE is used." >&2
            exit 1
          fi
          echo "Installing Azure DevOps CLI extension..."
          az extension add --name azure-devops >/dev/null 2>&1 || az extension update --name azure-devops >/dev/null 2>&1 || true
          echo "Downloading universal package..."
          az artifacts universal download \
            --organization "${{ secrets.ARTIFACT_ORG }}" \
            --feed "$ARTIFACT_FEED" \
            --name "$ARTIFACT_OVERRIDE" \
            --version "$ARTIFACT_VERSION" \
            --path artifact-download
          ls -R artifact-download || true
          mkdir -p "$TERRAFORM_WORKING_DIR"
          echo "Clearing existing infra folder contents..."
          rm -rf ${TERRAFORM_WORKING_DIR:?}/*
          shopt -s dotglob || true
          if [ -d artifact-download/infra ]; then
            echo "Moving contents of artifact-download/infra into $TERRAFORM_WORKING_DIR"
            mv artifact-download/infra/* "$TERRAFORM_WORKING_DIR"/
          else
            echo "Moving root artifact contents into $TERRAFORM_WORKING_DIR"
            mv artifact-download/* "$TERRAFORM_WORKING_DIR"/
          fi
          echo "Final infra directory tree:"; find "$TERRAFORM_WORKING_DIR" -maxdepth 4 -print

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          set -euo pipefail
          terraform init -input=false

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          set -euo pipefail
          terraform plan -input=false -out=tfplan


      - name: Terraform Apply
        if: ${{ env.AUTO_APPLY == 'true' && github.event_name == 'push' && env.ARTIFACT_OVERRIDE == ''}}
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          set -euo pipefail
          terraform apply -input=false -auto-approve $EXTRA_TF_APPLY_ARGS tfplan || exit 1

      - name: Skip Apply (PR or AUTO_APPLY != true)
        if: ${{ !(env.AUTO_APPLY == 'true' && github.event_name == 'push') }}
        run: echo "Skipping apply (either PR or AUTO_APPLY not true)."
